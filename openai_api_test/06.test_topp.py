import os
api_key = os.getenv("OPENAI_API_KEY")
from openai import OpenAI
client = OpenAI(api_key=api_key)


def test_temperature(tp):
    chat_completion = client.chat.completions.create(
        messages=[
            {
                "role": "user",
                "content": "한 마디 해줘."
            }
        ],
        model="gpt-4o-mini",
        top_p = tp
    )
    
    print(chat_completion.choices[0].message.content)

# 상위 10퍼센트 단어만 고려
test_temperature(0.1)

# 모든 단어를 고려
test_temperature(1.0)


'''
안녕하세요! 오늘 하루도 좋은 일만 가득하길 바랍니다. 필요한 것이 있으면 언제든지 말씀해 주세요!
안녕하세요! 오늘 하루도 밝고 좋은 일이 가득하길 바랍니다. 어떤 이야기를 나눌까요?

안녕하세요! 오늘 하루도 좋은 일만 가득하길 바랍니다. 필요한 것이 있으면 언제든지 말씀해 주세요!
안녕하세요! 오늘 하루도 좋은 일이 가득하길 바랍니다. 무엇을 도와드릴까요?

안녕하세요! 오늘 하루도 좋은 일만 가득하길 바랍니다. 필요한 것이 있으면 언제든지 말씀해 주세요!
안녕하세요! 오늘 하루도 좋은 일만 가득하시길 바랍니다. 필요하신 것이 있으면 언제든지 말씀해 주세요!

안녕하세요! 오늘 하루도 좋은 일만 가득하길 바랍니다. 필요한 것이 있으면 언제든지 말씀해 주세요!
안녕하세요! 오늘 하루도 좋은 하루 되시길 바랄게요. 필요한 게 있으면 언제든지 말씀해 주세요!

🔥 일관된 답변 / 랜덤성이 높은 답변
'''



# ❗️ 더 극적인 프롬프트로 체인지 ❗️"햄스터에게 우주 정복을 위한 한 마디를 해줘."


# "작은 몸에 큰 꿈을 담아, 우주를 향해 나아가자! 너의 용기와 지혜로 모든 별을 정복할 수 있어!"
# "작은 몸집으로 큰 꿈을 꿔봐, 우리의 우주를 정복할 힘은 너의 열정 속에 있어!"

# "작은 몸에 큰 꿈을 담아, 우주를 향해 나아가자! 너의 용기와 지혜로 모든 별을 정복할 수 있어!"
# "작은 체구로 큰 꿈을 꿔! 우주 정복은 너의 손안에 있어!" 🌌🐹✨

# "작은 몸에 큰 꿈을 담아, 우주를 향해 나아가자! 너의 용기와 지혜로 모든 별을 정복할 수 있어!"
# "작은 몸뚱이에 큰 꿈, 햄스터여, 우주를 향해 너의 모험을 시작하라! 정복의 시작은 네가 한 발짝 내딛는 순간이다!" 🐹🚀

# "작은 몸에 큰 꿈을 담아, 우주를 향해 나아가자! 너의 용기와 지혜로 모든 별을 정복할 수 있어!"
# "작은 몸에 큰 꿈을 담아, 우주를 향해 나아가라! 너의 용기와 지혜로 새로운 지평을 열어보자!"

# "작은 몸에 큰 꿈을 담아, 우주를 향해 나아가자! 너의 용기와 지혜로 모든 별을 정복할 수 있어!"
# 햄스터들아, 작은 몸집 속에 무한한 가능성이 있다! 모험의 시작은 언제나 네 작은 발바닥에서부터! 우주를 정복할 준비가 되었니? 별들과 혜성들 사이를 달려보자! 🌌✨

# "작은 몸에 큰 꿈을 담아, 우주를 향해 나아가자! 너의 용기와 지혜로 모든 별을 정복할 수 있어!"
# "작은 몸, 큰 꿈! 우주를 정복할 준비가 되었다면, 단단히 준비하고 날아오르자! 너의 열정이 별들과 은하를 밝힐 거야!"


# => temperature 매개변수보다 문법적으로 더 깔끔하고 / 노이즈(데이터 깨짐 현상)이 없고 / 더 빠름
# 🔥 랜덤성 조정 필요 시, temperature보다 top_p를 이용하는 것이 나아 보임 




'''
💡temperature VS Top_p💡
응답의 랜덤성을 제어하기 위한 매개변수

| We generally recommend altering this or temperature but not both.

1) temperature
확률 분포를 "평탄화"하거나 "강조"하는 방식으로 랜덤성을 제어
값이 높아질수록 생성 모델이 더 다양한 옵션을 선택
작동 방식:
    temperature = 0이면, 항상 가장 높은 확률의 단어를 선택(결정론적).
    temperature = 1이면, 확률 분포를 변경하지 않고 그대로 사용(기본값).
    temperature > 1이면, 낮은 확률의 단어도 선택될 가능성을 높임.
예시:
    1등 단어 확률 70%, 2등 20%, 3등 10%라면:
        temperature = 0: 항상 1등 선택.
        temperature = 1: 분포 그대로 사용(1등일 가능성 가장 높음).
        temperature > 1: 2등과 3등도 선택될 가능성 증가.


2) top_p (Nucleus Sampling)
누적 확률의 상위 p만 선택하는 방식으로 랜덤성을 제어
모델이 높은 확률의 단어들 중에서도 특정 확률 누적치 내에서만 단어를 선택하게 제한
작동 방식:
    top_p = 1.0이면, 모든 단어를 고려(제한 없음, 기본값).
    top_p = 0.9이면, 누적 확률이 90%에 해당하는 단어들만 고려하고 나머지는 제외.
    낮은 top_p 값이면, 높은 확률의 단어를 더 자주 선택
예시:
    1등 단어 확률 40%, 2등 30%, 3등 20%, 4등 10%라면:
        top_p = 1.0: 모든 단어를 고려(기본값).
        top_p = 0.9: 1등~3등까지만 고려(40% + 30% + 20% = 90%).
        top_p = 0.5: 1등~2등까지만 고려(40% + 30% = 70%, 3등 제외).
'''